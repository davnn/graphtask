from typing import Any

from collections.abc import Iterable, Iterator, Mapping, Set

class NodeView(Mapping, Set):
    def __getitem__(self, n: str) -> dict[str, Any]: ...

class EdgeView(Mapping, Set):
    def __getitem__(self, e: str) -> dict[str, Any]: ...

class Graph(Iterable):  # doesn't really inherit from iterable, but is iterable
    @property
    def nodes(self) -> NodeView: ...
    @property
    def edges(self) -> EdgeView: ...

class DiGraph(Graph):
    def add_node(self, node_for_adding: str, **attr: Any) -> None: ...
    def add_edge(self, u_of_edge: str, v_of_edge: str, **attr: Any) -> None: ...
    def predecessors(self, n: str) -> Iterator[str]: ...
    def successors(self, n: str) -> Iterator[str]: ...
    def reverse(self, copy: bool) -> DiGraph: ...

def topological_generations(graph: DiGraph) -> Iterator[list[str]]: ...
def is_directed_acyclic_graph(graph: DiGraph) -> bool: ...
def reverse_view(graph: DiGraph) -> DiGraph: ...
def neighbors(G: DiGraph, n: str) -> Iterator[str]: ...
def bfs_tree(G: DiGraph, source: str) -> DiGraph: ...
def induced_subgraph(G: DiGraph, nbunch: Iterable[str]) -> DiGraph: ...
